defmodule BABE.ParticipantSocket do
  use Phoenix.Socket

  ## Channels
  # channel "room:*", BABE.RoomChannel

  # The ":*" part just means that any event with `color_reference` topic will be sent to the ColorReference channel.
  channel("interactive_experiment:*", BABE.InteractiveExperimentChannel)

  ## Transports
  transport(:websocket, Phoenix.Transports.WebSocket,
    # Ensures idle connections are closed by the app before the 55 second timeout window of Heroku.
    timeout: 45_000
  )

  # transport :longpoll, Phoenix.Transports.LongPoll

  # Socket params are passed from the client and can
  # be used to verify and authenticate a participant. After
  # verification, you can put default assigns into
  # the socket that will be set for all channels, ie
  #
  #     {:ok, assign(socket, :participant_id, verified_participant_id)}
  #
  # To deny connection, return `:error`.
  #
  # See `Phoenix.Token` documentation for examples in
  # performing token verification on connect.

  # def connect(_params, socket) do
  #   {:ok, socket}
  # end

  # The "participant_id" is just a string randomly generated by the frontend to uniquely identify the participant. We don't have registration mechanisms for the participants for now.
  def connect(%{"participant_id" => participant_id}, socket) do
    {:ok, assign(socket, :participant_id, participant_id)}
  end

  # The incoming payload doesn't have the participant_id field. Reject connection.
  def connect(_params, _socket), do: :error

  # Socket id's are topics that allow you to identify all sockets for a given participant:
  #
  #     def id(socket), do: "participants_socket:#{socket.assigns.participant_id}"
  #
  # Would allow you to broadcast a "disconnect" event and terminate
  # all active sockets and channels for a given participant:
  #
  #     BABE.Endpoint.broadcast("participants_socket:#{participant.id}", "disconnect", %{})
  #
  # Returning `nil` makes this socket anonymous.
  def id(_socket), do: nil
end
